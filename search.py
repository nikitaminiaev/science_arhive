#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import sqlite3
from db_manager import PDFArchiveDatabaseManager


def search_database():
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PDF –∞—Ä—Ö–∏–≤–∞
    """
    print("=== –ü–û–ò–°–ö –ü–û –ê–†–•–ò–í–£ PDF –î–û–ö–£–ú–ï–ù–¢–û–í ===\n")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ Enter –¥–ª—è archive.db): ").strip()
    if not db_path:
        db_path = 'archive.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='pdf_metadata'")
        if not cursor.fetchone():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ pdf_metadata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM pdf_metadata")
        total_docs = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM pdf_search_index")
        indexed_docs = cursor.fetchone()[0]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        print(f"   –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {indexed_docs}")
        
        if total_docs == 0:
            print("\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
            return
        
        print(f"\nüîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("  - machine learning")
        print("  - \"neural networks\"")
        print("  - (deep OR machine) AND learning")
        print("  - comput* AND vision*")
        print("\nüí° –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
        print("  ‚≠ê‚≠ê‚≠ê –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (< -10.0) - —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        print("  ‚≠ê‚≠ê –í—ã—Å–æ–∫–∞—è (-10.0 –¥–æ -8.0) - —Ö–æ—Ä–æ—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è") 
        print("  ‚≠ê –°—Ä–µ–¥–Ω—è—è (-8.0 –¥–æ -5.0) - —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        print("  ‚óã –ù–∏–∑–∫–∞—è (> -5.0) - —Å–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        
        while True:
            query = input("\n> ").strip()
            
            if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                break
            
            if not query:
                continue
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                cursor.execute('''
                    SELECT 
                        pm.id,
                        pm.zip_path,
                        pm.pdf_filename,
                        pm.metadata,
                        bm25(pdf_search_index) as bm25_score,
                        snippet(pdf_search_index, 0, '<b>', '</b>', '...', 100) as snippet
                    FROM pdf_metadata pm
                    JOIN pdf_search_index ON pm.id = pdf_search_index.rowid
                    WHERE pdf_search_index MATCH ?
                    ORDER BY bm25(pdf_search_index)
                    LIMIT 10
                ''', (query,))
                
                results = cursor.fetchall()
                
                if not results:
                    print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    continue
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                very_high = sum(1 for r in results if r[4] < -10.0)
                high = sum(1 for r in results if -10.0 <= r[4] < -8.0)
                medium = sum(1 for r in results if -8.0 <= r[4] < -5.0)
                low = sum(1 for r in results if r[4] >= -5.0)
                
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                print(f"üìà –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê{very_high} ‚≠ê‚≠ê{high} ‚≠ê{medium} ‚óã{low}")
                print("=" * 80)
                
                for i, result in enumerate(results, 1):
                    doc_id, zip_path, pdf_filename, metadata, bm25_score, snippet = result
                    
                    # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    try:
                        metadata_dict = json.loads(metadata) if metadata else {}
                    except (json.JSONDecodeError, TypeError):
                        metadata_dict = {}
                    
                    file_size = metadata_dict.get('file_size')
                    pages_count = metadata_dict.get('pages_count')
                    
                    print(f"\n{i}. üìÑ {pdf_filename}")
                    print(f"   üìÅ –ê—Ä—Ö–∏–≤: {zip_path}")
                    if file_size:
                        print(f"   üìè –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç")
                    if pages_count:
                        print(f"   üìÉ –°—Ç—Ä–∞–Ω–∏—Ü: {pages_count}")
                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è BM25 —Å–∫–æ—Ä–∞
                    if bm25_score < -10.0:
                        relevance_text = "‚≠ê‚≠ê‚≠ê –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                    elif bm25_score < -8.0:
                        relevance_text = "‚≠ê‚≠ê –í—ã—Å–æ–∫–∞—è"
                    elif bm25_score < -5.0:
                        relevance_text = "‚≠ê –°—Ä–µ–¥–Ω—è—è"
                    else:
                        relevance_text = "‚óã –ù–∏–∑–∫–∞—è"
                    
                    print(f"   ‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {bm25_score:.4f} ({relevance_text})")
                    print(f"   üìù –§—Ä–∞–≥–º–µ–Ω—Ç: {snippet}")
                    print("-" * 60)
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ (–∏–ª–∏ Enter): ").strip()
                if choice.isdigit():
                    idx = int(choice) - 1
                    if 0 <= idx < len(results):
                        result = results[idx]
                        print(f"\nüìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:")
                        print(f"   –ê—Ä—Ö–∏–≤: {result[1]}")
                        print(f"   PDF: {result[2]}")
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    finally:
        if 'conn' in locals():
            conn.close()


if __name__ == "__main__":
    search_database() 