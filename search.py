#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import sqlite3


def check_database_integrity(db_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_path}...")
    
    try:
        conn = sqlite3.connect(db_path, timeout=30.0)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        print("   –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è PRAGMA integrity_check...")
        cursor.execute("PRAGMA integrity_check")
        integrity_result = cursor.fetchone()[0]
        
        if integrity_result != "ok":
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –ë–î: {integrity_result}")
            return False
        
        print("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î –≤ –ø–æ—Ä—è–¥–∫–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute("PRAGMA page_count")
        page_count = cursor.fetchone()[0]
        
        cursor.execute("PRAGMA page_size")
        page_size = cursor.fetchone()[0]
        
        db_size_bytes = page_count * page_size
        db_size_mb = db_size_bytes / (1024 * 1024)
        
        print(f"üìä –†–∞–∑–º–µ—Ä –ë–î: {db_size_mb:.1f} –ú–ë ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ {page_size} –±–∞–π—Ç)")
        
        conn.close()
        return True
        
    except sqlite3.DatabaseError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False


def optimize_database_connection(db_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ–ª—å—à–æ–π –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –ë–î
        conn = sqlite3.connect(
            db_path,
            timeout=60.0,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            check_same_thread=False
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ë–î (—Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è)
        conn.execute("PRAGMA cache_size = -2097152")   # 2 –ì–ë –∫—ç—à (2*1024*1024 –ö–ë)
        conn.execute("PRAGMA temp_store = MEMORY")      # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ RAM
        conn.execute("PRAGMA synchronous = OFF")        # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è
        conn.execute("PRAGMA journal_mode = MEMORY")    # –ñ—É—Ä–Ω–∞–ª –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
        conn.execute("PRAGMA mmap_size = 4294967296")   # 4 –ì–ë memory-mapped I/O
        conn.execute("PRAGMA read_uncommitted = true")  # –ì—Ä—è–∑–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        return conn
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None


def repair_database(db_path):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –ë–î
    """
    print(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    backup_path = db_path + ".backup"
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        print(f"   –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")
        
        source_conn = sqlite3.connect(db_path)
        backup_conn = sqlite3.connect(backup_path)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é –ë–î
        source_conn.backup(backup_conn)
        
        source_conn.close()
        backup_conn.close()
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {backup_path}")
        
        return backup_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        return None


def search_database():
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PDF –∞—Ä—Ö–∏–≤–∞
    """
    print("=== –ü–û–ò–°–ö –ü–û –ê–†–•–ò–í–£ PDF –î–û–ö–£–ú–ï–ù–¢–û–í (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –î–õ–Ø –ë–û–õ–¨–®–ò–• –ë–î) ===\n")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ Enter –¥–ª—è archive.db): ").strip()
    if not db_path:
        db_path = 'archive.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(db_path)
    file_size_mb = file_size / (1024 * 1024)
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ë–î: {file_size_mb:.1f} –ú–ë")
    
    # if file_size_mb > 100:
    #     print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–æ–ª—å—à–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")
        
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    #     if not check_database_integrity(db_path):
    #         print("\nüîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
    #         repaired_path = repair_database(db_path)
    #         if repaired_path:
    #             use_backup = input(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ë–î {repaired_path}? (y/n): ").strip().lower()
    #             if use_backup == 'y':
    #                 db_path = repaired_path
    #             else:
    #                 print("‚ùå –†–∞–±–æ—Ç–∞ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π –ë–î –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
    #                 return
    #         else:
    #             print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    #             return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π...")
        conn = optimize_database_connection(db_path)
        
        if not conn:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            return
            
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='pdf_metadata'")
        if not cursor.fetchone():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ pdf_metadata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö –ë–î
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        cursor.execute("SELECT COUNT(*) FROM pdf_metadata")
        total_docs = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM pdf_search_index")
        indexed_docs = cursor.fetchone()[0]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs:,}")
        print(f"   –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {indexed_docs:,}")
        
        if total_docs == 0:
            print("\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
            return
        
        print(f"\nüîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("  - machine learning")
        print("  - \"neural networks\"")
        print("  - (deep OR machine) AND learning")
        print("  - comput* AND vision*")
        print("\nüí° –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:")
        print("  ‚≠ê‚≠ê‚≠ê –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (< -10.0) - —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        print("  ‚≠ê‚≠ê –í—ã—Å–æ–∫–∞—è (-10.0 –¥–æ -8.0) - —Ö–æ—Ä–æ—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è") 
        print("  ‚≠ê –°—Ä–µ–¥–Ω—è—è (-8.0 –¥–æ -5.0) - —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        print("  ‚óã –ù–∏–∑–∫–∞—è (> -5.0) - —Å–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        
        while True:
            query = input("\n> ").strip()
            
            if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                break
            
            if not query:
                continue
            
            try:
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ë–î
                print("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")
                
                cursor.execute('''
                    SELECT 
                        pm.id,
                        pm.zip_path,
                        pm.pdf_filename,
                        pm.metadata,
                        bm25(pdf_search_index) as bm25_score,
                        snippet(pdf_search_index, 0, '<b>', '</b>', '...', 100) as snippet
                    FROM pdf_metadata pm
                    JOIN pdf_search_index ON pm.id = pdf_search_index.rowid
                    WHERE pdf_search_index MATCH ?
                    ORDER BY bm25(pdf_search_index)
                    LIMIT 20
                ''', (query,))
                
                results = cursor.fetchall()
                
                if not results:
                    print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    continue
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                very_high = sum(1 for r in results if r[4] < -10.0)
                high = sum(1 for r in results if -10.0 <= r[4] < -8.0)
                medium = sum(1 for r in results if -8.0 <= r[4] < -5.0)
                low = sum(1 for r in results if r[4] >= -5.0)
                
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                print(f"üìà –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê{very_high} ‚≠ê‚≠ê{high} ‚≠ê{medium} ‚óã{low}")
                print("=" * 80)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ë–î
                results_per_page = 5
                total_pages = (len(results) + results_per_page - 1) // results_per_page
                current_page = 1
                
                def show_results_page(page_num):
                    start_idx = (page_num - 1) * results_per_page
                    end_idx = min(start_idx + results_per_page, len(results))
                    
                    for i in range(start_idx, end_idx):
                        result = results[i]
                        doc_id, zip_path, pdf_filename, metadata, bm25_score, snippet = result
                        
                        # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        try:
                            metadata_dict = json.loads(metadata) if metadata else {}
                        except (json.JSONDecodeError, TypeError):
                            metadata_dict = {}
                        
                        file_size = metadata_dict.get('file_size')
                        pages_count = metadata_dict.get('pages_count')
                        
                        print(f"\n{i+1}. üìÑ {pdf_filename}")
                        print(f"   üìÅ –ê—Ä—Ö–∏–≤: {os.path.basename(zip_path)}")
                        if file_size:
                            print(f"   üìè –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç")
                        if pages_count:
                            print(f"   üìÉ –°—Ç—Ä–∞–Ω–∏—Ü: {pages_count}")
                        
                        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è BM25 —Å–∫–æ—Ä–∞
                        if bm25_score < -10.0:
                            relevance_text = "‚≠ê‚≠ê‚≠ê –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                        elif bm25_score < -8.0:
                            relevance_text = "‚≠ê‚≠ê –í—ã—Å–æ–∫–∞—è"
                        elif bm25_score < -5.0:
                            relevance_text = "‚≠ê –°—Ä–µ–¥–Ω—è—è"
                        else:
                            relevance_text = "‚óã –ù–∏–∑–∫–∞—è"
                        
                        print(f"   ‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {bm25_score:.4f} ({relevance_text})")
                        print(f"   üìù –§—Ä–∞–≥–º–µ–Ω—Ç: {snippet}")
                        print("-" * 60)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                show_results_page(current_page)
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                while True:
                    if total_pages > 1:
                        print(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}")
                        nav_choice = input("–ö–æ–º–∞–Ω–¥—ã: [n]ext, [p]rev, [–Ω–æ–º–µ—Ä], [d]etail –Ω–æ–º–µ—Ä, [q]uit: ").strip().lower()
                    else:
                        nav_choice = input("–ö–æ–º–∞–Ω–¥—ã: [d]etail –Ω–æ–º–µ—Ä, [q]uit: ").strip().lower()
                    
                    if nav_choice == 'q' or nav_choice == 'quit':
                        break
                    elif nav_choice == 'n' and current_page < total_pages:
                        current_page += 1
                        show_results_page(current_page)
                    elif nav_choice == 'p' and current_page > 1:
                        current_page -= 1
                        show_results_page(current_page)
                    elif nav_choice.isdigit():
                        page_num = int(nav_choice)
                        if 1 <= page_num <= total_pages:
                            current_page = page_num
                            show_results_page(current_page)
                        else:
                            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{total_pages}")
                    elif nav_choice.startswith('d') and len(nav_choice.split()) > 1:
                        try:
                            doc_num = int(nav_choice.split()[1])
                            if 1 <= doc_num <= len(results):
                                result = results[doc_num - 1]
                                print(f"\nüìç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ #{doc_num}:")
                                print(f"   –ê—Ä—Ö–∏–≤: {result[1]}")
                                print(f"   PDF: {result[2]}")
                                print(f"   ID –≤ –ë–î: {result[0]}")
                            else:
                                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(results)}")
                        except ValueError:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: d –Ω–æ–º–µ—Ä")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
            except sqlite3.OperationalError as e:
                if "database disk image is malformed" in str(e):
                    print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞!")
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î")
                    break
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if "database disk image is malformed" in str(e):
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:")
            print("1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")
            print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ë–î –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
            print("4. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞")
    
    finally:
        if 'conn' in locals() and conn:
            conn.close()
            print("üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    search_database() 