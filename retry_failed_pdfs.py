#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.
–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ PDF —Ñ–∞–π–ª—ã.
"""

import argparse
import os
import re
import json
from typing import List, Tuple
from src.db_manager import PDFArchiveDatabaseManager
from filling_db import extract_pdf_text_from_zip, clean_text_encoding


def parse_error_file(error_file_path: str) -> List[Tuple[str, str, str]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö PDF —Ñ–∞–π–ª–∞—Ö.
    
    Args:
        error_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—à–∏–±–∫–∞–º–∏
        
    Returns:
        List of tuples: (zip_path, pdf_filename, error_message)
    """
    failed_files = []
    
    if not os.path.exists(error_file_path):
        print(f"‚ùå –§–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {error_file_path}")
        return failed_files
    
    try:
        with open(error_file_path, 'r', encoding='utf-8', errors='replace') as f:
            content = f.read()
            
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –±–ª–æ–∫–∏ –æ—à–∏–±–æ–∫ (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –¥–≤—É–º—è \n)
        error_blocks = content.strip().split('\n\n')
        
        for block in error_blocks:
            if not block.strip():
                continue
                
            lines = block.strip().split('\n')
            zip_path = None
            pdf_filename = None
            error_message = None
            
            for line in lines:
                if line.startswith('zip_path: '):
                    zip_path = line[10:].strip()  # –£–±–∏—Ä–∞–µ–º "zip_path: "
                elif line.startswith('pdf_filename: '):
                    pdf_filename = line[14:].strip()  # –£–±–∏—Ä–∞–µ–º "pdf_filename: "
                elif line.startswith('error: '):
                    error_message = line[7:].strip()  # –£–±–∏—Ä–∞–µ–º "error: "
            
            if zip_path and pdf_filename and error_message:
                failed_files.append((zip_path, pdf_filename, error_message))
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {e}")
        
    return failed_files


def retry_failed_pdf(zip_path: str, pdf_filename: str, db_manager: PDFArchiveDatabaseManager, root_directory: str) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω PDF —Ñ–∞–π–ª.
    
    Args:
        zip_path: –ü—É—Ç—å –∫ ZIP –∞—Ä—Ö–∏–≤—É
        pdf_filename: –ò–º—è PDF —Ñ–∞–π–ª–∞
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        root_directory: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –∏–Ω–∞—á–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(zip_path):
            print(f"   ‚ùå ZIP –∞—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {zip_path}")
            return False
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
        raw_text, file_size, pages_count = extract_pdf_text_from_zip(zip_path, pdf_filename)
        
        if raw_text is None:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ {pdf_filename}")
            return False
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        clean_raw_text = clean_text_encoding(str(raw_text)) if raw_text else raw_text
        clean_pdf_filename = clean_text_encoding(pdf_filename)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        relative_zip_path = os.path.relpath(zip_path, root_directory)
        clean_relative_zip_path = clean_text_encoding(relative_zip_path)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = json.dumps({"root_directory": root_directory, "retry": True})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        if db_manager.pdf_exists(clean_relative_zip_path, clean_pdf_filename):
            print(f"   ‚ö†Ô∏è  PDF —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: {pdf_filename}")
            return True
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_manager.insert_pdf_content(
            clean_relative_zip_path, 
            clean_pdf_filename, 
            clean_raw_text, 
            metadata, 
            file_size, 
            pages_count
        )
        
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {pdf_filename}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_filename}: {e}")
        return False


def write_retry_errors(failed_retries: List[Tuple[str, str, str]], output_file: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    
    Args:
        failed_retries: –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        output_file: –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫
    """
    try:
        with open(output_file, 'w', encoding='utf-8', errors='replace') as f:
            f.write(f"# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ\n")
            f.write(f"# –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(failed_retries)}\n\n")
            
            for zip_path, pdf_filename, error in failed_retries:
                f.write(f"zip_path: {zip_path}\n")
                f.write(f"pdf_filename: {pdf_filename}\n")
                f.write(f"error: {error}\n\n")
                
        print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ {len(failed_retries)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {e}")


def main():
    parser = argparse.ArgumentParser(description='–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏')
    parser.add_argument('error_file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—à–∏–±–∫–∞–º–∏ (–æ–±—ã—á–Ω–æ pdf_error.txt)')
    parser.add_argument('--db', default='archive.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: archive.db)')
    parser.add_argument('--root-dir', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)')
    parser.add_argument('--output', default='retry_errors.txt', help='–§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫')
    parser.add_argument('--batch-size', type=int, default=10, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏
    if not os.path.exists(args.error_file):
        print(f"‚ùå –§–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.error_file}")
        return
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager = PDFArchiveDatabaseManager(args.db)
    conn = db_manager.create_database_schema()
    
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏...")
        failed_files = parse_error_file(args.error_file)
        
        if not failed_files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
            
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(failed_files)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        root_directory = args.root_dir
        if not root_directory:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–∏–π –∫–æ—Ä–µ–Ω—å –∏–∑ –ø—É—Ç–µ–π
            paths = [zip_path for zip_path, _, _ in failed_files]
            if paths:
                root_directory = os.path.commonpath(paths)
                # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                while not any(os.path.exists(os.path.join(root_directory, 'libgen.scimag')) for _ in [1]):
                    parent = os.path.dirname(root_directory)
                    if parent == root_directory:  # –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ—Ä–Ω—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                        break
                    root_directory = parent
                    
        print(f"üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_directory}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        successful_count = 0
        failed_retries = []
        
        for i, (zip_path, pdf_filename, original_error) in enumerate(failed_files, 1):
            print(f"üìÑ [{i}/{len(failed_files)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_filename}")
            
            success = retry_failed_pdf(zip_path, pdf_filename, db_manager, root_directory)
            
            if success:
                successful_count += 1
            else:
                failed_retries.append((zip_path, pdf_filename, original_error))
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % args.batch_size == 0:
                print(f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(failed_files)}, –£—Å–ø–µ—à–Ω–æ: {successful_count}, –û—à–∏–±–æ–∫: {len(failed_retries)}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {len(failed_retries)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_count / len(failed_files) * 100:.1f}%")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
        if failed_retries:
            write_retry_errors(failed_retries, args.output)
            
    finally:
        conn.close()


if __name__ == "__main__":
    main() 